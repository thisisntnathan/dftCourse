I"”(<p>Now that we know how to gather information about the system, how do we ask it to run a job for us?</p>

<p><kbd>SLURM</kbd> needs to know two things to run a job: <strong>what we want to do</strong> and <strong>the resources we need to do it</strong>. We‚Äôll use a <em>shell script</em> to specify both of these parameters.</p>

<p>Let‚Äôs make a new script called <code class="language-plaintext highlighter-rouge">submit.sh</code>. In your text editor copy and paste the following (minimal) submission script:</p>

<!--
```sh
#!/bin/bash

#SBATCH -p chemq          # submit to partition: chemq
#SBATCH -J hello          # job name
#SBATCH -o out.txt        # name output file
#SBATCH -N 1              # run on one node
#SBATCH --mem=0           # allocate all available memory

# ‚ãÄ‚ãÄ‚ãÄ Above are the resource requests ‚ãÄ‚ãÄ‚ãÄ
#    ‚ãÅ‚ãÅ‚ãÅ Below are the job tasks ‚ãÅ‚ãÅ‚ãÅ

echo 'Starting job'
bash hello.sh             # run our first script from the
echo 'Resting 30 sec'     #   previous exercise
sleep 30                  # do nothing for 30 sec
echo 'Ending job'
```
-->

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/7549164222e23dfe9c157e2679bca17f.js"> </script>

<p>Save this file in its own folder with a descriptive name like <code class="language-plaintext highlighter-rouge">myFirstSlurmJob</code>. Place the script <code class="language-plaintext highlighter-rouge">hello.sh</code> from <a href="/ShortCourse/firstScript.html">the first exercise</a> into this folder too. Now, in order to run this job you need to be on a system that is managed by <kbd>SLURM</kbd>. So let‚Äôs log on to the AS-CHEM cluster.</p>

<blockquote>
  <p>You‚Äôll need to be connected to the Cornell VPN to access the cluster. If you are a Cornell chemistry student and don‚Äôt have access to the cluster go see ChemIT (or your group IT representative) to set up your cluster account. If you are not a Cornell chemistry student you‚Äôll need to follow your institution‚Äôs cluster login instructions. Depending on how your cluster is set up some of the instructions below may not work, when in doubt contact your system administrator.</p>
</blockquote>

<p>Open up the command-line, type <code class="language-plaintext highlighter-rouge">ssh &lt;yourNetID&gt;@cluster2020.chem.cornell.edu</code> and you‚Äôll see a password prompt appear. As you enter your password <strong>nothing will appear</strong>; this is normal. The terminal is recording your keystrokes as usual, but will not display them for security purposes.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NathanLui@local | ~ <span class="nv">$ </span>ssh nml64@cluster2020.chem.cornell.edu
Password: 

Last login: Sun Dec 26 14:04:09 2021 from &lt;IP address&gt;
nml64@as-chm-cluster | ~ <span class="nv">$ </span>
</code></pre></div></div>

<p>See how the terminal prompt has now changed from <code class="language-plaintext highlighter-rouge">NathanLui@local</code> to <code class="language-plaintext highlighter-rouge">nml64@as-chm-cluster</code> to indicate that I‚Äôm now working on the cluster. We can navigate the cluster with the same commands we learned <a href="/ShortCourse/linuxBasics.html">earlier</a>. To test our script we‚Äôll need to use our SFTP client (FileZilla) to transfer our scripts to the cluster. If you haven‚Äôt yet, go set up FileZilla using the directions in <a href="/ShortCourse/software.html">section 1</a>. Once you‚Äôve done that, open FileZilla and connect to the <code class="language-plaintext highlighter-rouge">AS-CHEM</code> cluster. Drag your whole <code class="language-plaintext highlighter-rouge">myFirstSlurmJob</code> folder into the cluster pane to transfer it.</p>

<center>
    <img src="/assets/5_1.png" width="641.5" height="462.5" />
</center>

<blockquote>
  <p>Of course, you have the option to create a new folder on the cluster directly using <code class="language-plaintext highlighter-rouge">mkdir</code> and then drag the individual shell scripts into that file, but as your experience grows as will the number of files you‚Äôll have to keep track of. It will be much more manageable if the organization of your local system mirrors that of the cluster. Transferring whole directories ensures that paths will remain the same. For more, see <a href="">best practices</a>.</p>
</blockquote>

<p>Now, lets navigate into that folder and take a look:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nml64@as-chm-cluster | ~ <span class="nv">$ </span><span class="nb">cd </span>myFirstSlurmJob/
nml64@as-chm-cluster | ~/myFirstSlurmJob <span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>
total 8.0K
<span class="nt">-rwxr-xr-x</span> 1 nml64 collum  79 Dec 26 15:59 hello.sh
<span class="nt">-rwxr-xr-x</span> 1 nml64 collum 338 Dec 26 15:59 submit.sh
</code></pre></div></div>

<p>Now we can submit our job to the <kbd>SLURM</kbd> workload manager:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nml64@as-chm-cluster | ~/myFirstSlurmJob <span class="nv">$ </span>sbatch submit.sh
Submitted batch job 8716
</code></pre></div></div>

<p>Checking the job queue and node status shows us the progress of our new job:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nml64@as-chm-cluster | ~/myFirstSlurmJob <span class="nv">$ </span>squeue
 JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST<span class="o">(</span>REASON<span class="o">)</span> 
  8716     chemq    hello    nml64  R       0:16      1 chem006 
nml64@as-chm-cluster | ~/myFirstSlurmJob <span class="nv">$ </span>pestat
Hostname       Partition     Node Num_CPU  CPUload  Memsize  Freemem  Joblist
                            State Use/Tot              <span class="o">(</span>MB<span class="o">)</span>     <span class="o">(</span>MB<span class="o">)</span>  JobId User ... 
...
 chem006           chemq      mix  16  16    16.00    31935    29651  8716 nml64  
...
</code></pre></div></div>

<p>But wait a second! Where is our output? We‚Äôve tasked 16 CPUs with 28 GB of memory to tell the whole world ‚ÄúHello!‚Äù, where did it all go? Let‚Äôs take a look at our directory.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nml64@as-chm-cluster | ~/myFirstSlurmJob <span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>
total 12K
<span class="nt">-rwxr-xr-x</span> 1 nml64  79 Dec 26 15:59 hello.sh
<span class="nt">-rw-r--r--</span> 1 nml64  81 Dec 26 17:35 out.txt
<span class="nt">-rwxr-xr-x</span> 1 nml64 338 Dec 26 15:59 submit.sh
nml64@as-chm-cluster | ~/myFirstSlurmJob <span class="nv">$ </span><span class="nb">cat </span>out.txt
Starting job
Hello world!
My favorite food is pizza.
I am  years old.
Resting 30 sec
Job <span class="nb">complete</span>
</code></pre></div></div>

<p>So that‚Äôs where its all gone to! <kbd>SLURM</kbd> redirects all standard output from the terminal to the output file that we specified in the resource requests section.</p>

<p>There‚Äôs still another issue! The program doesn‚Äôt know how old we are because the environmental variable we declared in the last tutorial doesn‚Äôt get transferred with the file (i.e. we‚Äôre in a different environment). So we have to redeclare <code class="language-plaintext highlighter-rouge">age</code> in this environment.</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/8bd4ae58c9ff391c8b313a68151a6498.js"> </script>

<p>This fixes our issue and if we run the job again we can see that the script works as it‚Äôs supposed to!</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nml64@as-chm-cluster | ~/myFirstSlurmJob <span class="nv">$ </span>sbatch submit.sh
Submitted batch job 8719
nml64@as-chm-cluster | ~/myFirstSlurmJob <span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>
total 12K
<span class="nt">-rwxr-xr-x</span> 1 nml64 collum 107 Dec 26 17:46 hello.sh
<span class="nt">-rw-r--r--</span> 1 nml64 collum 100 Dec 26 17:56 out.txt
<span class="nt">-rwxr-xr-x</span> 1 nml64 collum 352 Dec 26 17:55 submit.sh
nml64@as-chm-cluster | ~/myFirstSlurmJob <span class="nv">$ </span><span class="nb">cat </span>out.txt
Starting job
Hello world!
My favorite food is pizza.
I am 26 years old.
Resting 30 sec
Job <span class="nb">complete</span>
</code></pre></div></div>

<h3 id="-congrats-you-just-ran-your-first-slurm-job--"><center>üçæüëèüçæ Congrats!!! You just ran your first <kbd>SLURM</kbd> job üçæüëèüçæ </center></h3>

<p><br /></p>

<h4 id="slurm-will-overwrite-data-files-with-the-same-name"><kbd>SLURM</kbd> will overwrite data files with the same name</h4>

<p>One important thing to note is that we ran this job multiple times <em>in the same directory</em>. So <kbd>SLURM</kbd> <strong>wrote over</strong> <code class="language-plaintext highlighter-rouge">out.txt</code> the second time we ran the job. There is <strong>no way</strong> to get back our first <code class="language-plaintext highlighter-rouge">out.txt</code> (trivially, you could scroll up in the terminal history looking for our previous <code class="language-plaintext highlighter-rouge">cat out.txt</code> call, but this isn‚Äôt really a generalizable solution). This could be problematic since we might not remember how we got to the previous <code class="language-plaintext highlighter-rouge">out.txt</code> and how to recreate its results. In general, a single folder should represent a single program call so that unintentional overwrites cannot happen. In other words:</p>

<blockquote>
  <p><em>Every new job should begin in its <strong>own</strong> new folder</em>.</p>
</blockquote>

<p>In the next section, we‚Äôll talk about the final part of our recipe: the Gaussian input file.</p>

<p><br /></p>

<table>
  <tbody>
    <tr>
      <td><center>Previous<br /><a href="/ShortCourse/slurm.html"><kbd>SLURM</kbd> Basics</a></center></td>
      <td><center><a href="/Introduction.html">Home</a></center></td>
      <td><center>Next<br /><a href="/ShortCourse/gaussianInputs.html">Gaussian Input Files</a></center></td>
    </tr>
  </tbody>
</table>

<!-- <br /> -->

<!-- #### References -->
:ET